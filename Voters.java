package Voting_App_Java-Solidity;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class Voters extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b5061343c806100206000396000f30060806040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ca358821461016457806312e9d09a146101cd578063172c6b5d146102cf5780631a5e3f25146103265780631b605b86146103af57806322853944146103da578063256c0f27146104ef57806334cc60cf146105325780633c2eab5b146105ee578063439f5ac21461067b57806349059d941461070b5780634918b34e146107c75780634d37542c146108b65780635ee1ae81146108e35780636b15b84a1461093a578063749222e3146109c357806374c0854c14610a89578063755e8fc914610af257806378f305c614610bae578063858cf8da14610c3e57806385f995db14610cfc57806391b5ddd314610d69578063c22b6b9d14610dd2578063c828371e14610e8e578063cfb6338014610f1e578063d0e2ed8d14610f9f578063f8f30fc4146110fa575b600080fd5b34801561017057600080fd5b506101cb600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506112e1565b005b3480156101d957600080fd5b50610254600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506112fb565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610294578082015181840152602081019050610279565b50505050905090810190601f1680156102c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102db57600080fd5b50610310600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611662565b6040518082815260200191505060405180910390f35b34801561033257600080fd5b506103ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506116ae565b005b3480156103bb57600080fd5b506103c4611a0e565b6040518082815260200191505060405180910390f35b3480156103e657600080fd5b506104ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611a18565b005b3480156104fb57600080fd5b50610530600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b47565b005b34801561053e57600080fd5b50610573600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611beb565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105b3578082015181840152602081019050610598565b50505050905090810190601f1680156105e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105fa57600080fd5b50610639600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ccf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561068757600080fd5b50610690611d57565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106d05780820151818401526020810190506106b5565b50505050905090810190601f1680156106fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561071757600080fd5b5061074c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611df9565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561078c578082015181840152602081019050610771565b50505050905090810190601f1680156107b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107d357600080fd5b50610874600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611edd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108c257600080fd5b506108e16004803603810190808035906020019092919050505061225d565b005b3480156108ef57600080fd5b50610924600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612267565b6040518082815260200191505060405180910390f35b34801561094657600080fd5b506109c1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506122b3565b005b3480156109cf57600080fd5b50610a0e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612937565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a4e578082015181840152602081019050610a33565b50505050905090810190601f168015610a7b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a9557600080fd5b50610af0600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612a37565b005b348015610afe57600080fd5b50610b33600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a51565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b73578082015181840152602081019050610b58565b50505050905090810190601f168015610ba05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610bba57600080fd5b50610bc3612b35565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c03578082015181840152602081019050610be8565b50505050905090810190601f168015610c305780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c4a57600080fd5b50610ca5600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612bd7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610ce8578082015181840152602081019050610ccd565b505050509050019250505060405180910390f35b348015610d0857600080fd5b50610d67600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612cd0565b005b348015610d7557600080fd5b50610dd0600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612d71565b005b348015610dde57600080fd5b50610e13600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d8b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e53578082015181840152602081019050610e38565b50505050905090810190601f168015610e805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e9a57600080fd5b50610ea3612e6f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ee3578082015181840152602081019050610ec8565b50505050905090810190601f168015610f105780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610f2a57600080fd5b50610f85600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612f11565b604051808215151515815260200191505060405180910390f35b348015610fab57600080fd5b506110f8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612fab565b005b34801561110657600080fd5b506112df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506131d7565b005b80600b90805190602001906112f79291906132a3565b5050565b606060008061130985612267565b915060095482101515611353576040805190810160405280601b81526020017f596f752072656163686564206e756d626572206f6620766f7465730000000000815250925061165a565b600090505b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101561162157836040516020018082805190602001908083835b6020831015156113db57805182526020820191506020810190506020830392506113b6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515611444578051825260208201915060208101905060208303925061141f565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156114c157fe5b906000526020600020906003020160010160405160200180828054600181600116156101000203166002900480156115305780601f1061150e576101008083540402835291820191611530565b820191906000526020600020905b81548152906001019060200180831161151c575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156115795780518252602082019150602081019050602083039250611554565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141561161457606060405190810160405280602a81526020017f596f7520616c726561647920766f74656420746f20746869732063616e64696481526020017f617465206265666f726500000000000000000000000000000000000000000000815250925061165a565b8080600101915050611358565b6040805190810160405280600481526020017f446f6e650000000000000000000000000000000000000000000000000000000081525092505b505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b81600073ffffffffffffffffffffffffffffffffffffffff16600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561174d57600080fd5b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206060604051908101604052808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001600273ffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611863929190613323565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015401600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055506007826040518082805190602001908083835b602083101515611972578051825260208201915060208101905060208303925061194d565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000600954905090565b60a0604051908101604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018281526020016000815250600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190611af9929190613323565b506040820151816002019080519060200190611b16929190613323565b506060820151816003019080519060200190611b33929190613323565b506080820151816004015590505050505050565b600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000611bbe91906133a3565b600282016000611bce91906133a3565b600382016000611bde91906133a3565b6004820160009055505050565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cc35780601f10611c9857610100808354040283529160200191611cc3565b820191906000526020600020905b815481529060010190602001808311611ca657829003601f168201915b50505050509050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515611d1d57fe5b906000526020600020906003020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6060600c8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611def5780601f10611dc457610100808354040283529160200191611def565b820191906000526020600020905b815481529060010190602001808311611dd257829003601f168201915b5050505050905090565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ed15780601f10611ea657610100808354040283529160200191611ed1565b820191906000526020600020905b815481529060010190602001808311611eb457829003601f168201915b50505050509050919050565b6000816040516020018082805190602001908083835b602083101515611f185780518252602082019150602081019050602083039250611ef3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515611f815780518252602082019150602081019050602083039250611f5c565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600460006002866040518082805190602001908083835b602083101515611fee5780518252602082019150602081019050602083039250611fc9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160405160200180828054600181600116156101000203166002900480156120dd5780601f106120bb5761010080835404028352918201916120dd565b820191906000526020600020905b8154815290600101906020018083116120c9575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156121265780518252602082019150602081019050602083039250612101565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141561225257600460006002856040518082805190602001908083835b6020831015156121995780518252602082019150602081019050602083039250612174565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050612257565b600290505b92915050565b8060098190555050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401549050919050565b60008083600073ffffffffffffffffffffffffffffffffffffffff16600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561235557600080fd5b600092505b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905083101561293057836040516020018082805190602001908083835b6020831015156123dd57805182526020820191506020810190506020830392506123b8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156124465780518252602082019150602081019050602083039250612421565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020848154811015156124c357fe5b906000526020600020906003020160010160405160200180828054600181600116156101000203166002900480156125325780601f10612510576101008083540402835291820191612532565b820191906000526020600020905b81548152906001019060200180831161251e575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561257b5780518252602082019150602081019050602083039250612556565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141561292357600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156125fe57fe5b9060005260206000209060030201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600061264491906133a3565b6002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550506001600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015403600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040181905550600091505b6007846040518082805190602001908083835b6020831015156127365780518252602082019150602081019050602083039250612711565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054905082101561291e576007846040518082805190602001908083835b6020831015156127ac5780518252602082019150602081019050602083039250612787565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020828154811015156127ec57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156129115760006007856040518082805190602001908083835b602083101515612884578051825260208201915060208101905060208303925061285f565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020838154811015156128c457fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061291e565b81806001019250506126fe565b612930565b828060010193505061235a565b5050505050565b6060600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561298557fe5b90600052602060002090600302016001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a2a5780601f106129ff57610100808354040283529160200191612a2a565b820191906000526020600020905b815481529060010190602001808311612a0d57829003601f168201915b5050505050905092915050565b80600a9080519060200190612a4d9291906132a3565b5050565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b295780601f10612afe57610100808354040283529160200191612b29565b820191906000526020600020905b815481529060010190602001808311612b0c57829003601f168201915b50505050509050919050565b6060600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bcd5780601f10612ba257610100808354040283529160200191612bcd565b820191906000526020600020905b815481529060010190602001808311612bb057829003601f168201915b5050505050905090565b60606007826040518082805190602001908083835b602083101515612c115780518252602082019150602081019050602083039250612bec565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805480602002602001604051908101604052809291908181526020018280548015612cc457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612c7a575b50505050509050919050565b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515612d1d57fe5b906000526020600020906003020160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b80600c9080519060200190612d879291906132a3565b5050565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e635780601f10612e3857610100808354040283529160200191612e63565b820191906000526020600020905b815481529060010190602001808311612e4657829003601f168201915b50505050509050919050565b6060600b8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612f075780601f10612edc57610100808354040283529160200191612f07565b820191906000526020600020905b815481529060010190602001808311612eea57829003601f168201915b5050505050905090565b6000600115156003836040518082805190602001908083835b602083101515612f4f5780518252602082019150602081019050602083039250612f2a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1615151415612fa15760019050612fa6565b600090505b919050565b60088590806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060a0604051908101604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183815260200182815250600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906130f1929190613323565b50604082015181600201908051906020019061310e929190613323565b50606082015181600301908051906020019061312b929190613323565b506080820151816004019080519060200190613148929190613323565b5090505060016003856040518082805190602001908083835b6020831015156131865780518252602082019150602081019050602083039250613161565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff0219169083151502179055505050505050565b6131e48787868689612fab565b6131f087878484611a18565b866002876040518082805190602001908083835b6020831015156132295780518252602082019150602081019050602083039250613204565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106132e457805160ff1916838001178555613312565b82800160010185558215613312579182015b828111156133115782518255916020019190600101906132f6565b5b50905061331f91906133eb565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061336457805160ff1916838001178555613392565b82800160010185558215613392579182015b82811115613391578251825591602001919060010190613376565b5b50905061339f91906133eb565b5090565b50805460018160011615610100020316600290046000825580601f106133c957506133e8565b601f0160209004906000526020600020908101906133e791906133eb565b5b50565b61340d91905b808211156134095760008160009055506001016133f1565b5090565b905600a165627a7a7230582096bb3fdbac1bc45bf0fa731dc38a04ad6cf500309e24ef06e340eff743e521ed0029";

    public static final String FUNC_SETSTARTTIME = "setStartTime";

    public static final String FUNC_ADDVOTERVOTES = "addVoterVotes";

    public static final String FUNC_GETNATIONALIDARRAYLENGTH = "getNationalIDArrayLength";

    public static final String FUNC_GRANTYOURVOTE = "grantYourVote";

    public static final String FUNC_GETVOTESCOUNT = "getVotesCount";

    public static final String FUNC_ADDVOTERDETAILS = "addVoterDetails";

    public static final String FUNC_DELETEVOTERDETAIL = "deleteVoterDetail";

    public static final String FUNC_GETVOTERCITY = "getVoterCity";

    public static final String FUNC_GETVOTEDCANDIDATESTXTHASH = "getVotedCandidatesTxtHash";

    public static final String FUNC_GETENDTIME = "getEndTime";

    public static final String FUNC_GETVOTERDATEOFBIRTH = "getVoterDateOfBirth";

    public static final String FUNC_CHECKIDANDPASSWORD = "checkIdAndPassword";

    public static final String FUNC_UPDATEVOTESCOUNT = "updateVotesCount";

    public static final String FUNC_GETNUMBEROFVOTES = "getNumberOfVotes";

    public static final String FUNC_REVOKEMYVOTE = "revokeMyVote";

    public static final String FUNC_GETVOTEDCANDIDATESADDRESS = "getVotedCandidatesAddress";

    public static final String FUNC_SETSTARTDATE = "setStartDate";

    public static final String FUNC_GETVOTERYEAR = "getVoterYear";

    public static final String FUNC_GETSTARTDATE = "getStartDate";

    public static final String FUNC_GETCANDIDATEVOTERS = "getCandidateVoters";

    public static final String FUNC_ADDTXTHASHVOTER = "addTxtHashVoter";

    public static final String FUNC_SETENDTIME = "setEndTime";

    public static final String FUNC_GETVOTERNAME = "getVoterName";

    public static final String FUNC_GETSTARTTIME = "getStartTime";

    public static final String FUNC_CHECKNATIONALID = "checkNationalID";

    public static final String FUNC_ADDVOTERINFO = "addVoterInfo";

    public static final String FUNC_SIGNUPVOTER = "signUpVoter";

    protected Voters(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Voters(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<TransactionReceipt> setStartTime(String _startTime) {
        final Function function = new Function(
                FUNC_SETSTARTTIME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_startTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> addVoterVotes(String voterAddress, String _nationalId) {
        final Function function = new Function(FUNC_ADDVOTERVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(voterAddress), 
                new org.web3j.abi.datatypes.Utf8String(_nationalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getNationalIDArrayLength(String voterAddress) {
        final Function function = new Function(FUNC_GETNATIONALIDARRAYLENGTH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(voterAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> grantYourVote(String voterAddress, String _candidateNationalId) {
        final Function function = new Function(
                FUNC_GRANTYOURVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(voterAddress), 
                new org.web3j.abi.datatypes.Utf8String(_candidateNationalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getVotesCount() {
        final Function function = new Function(FUNC_GETVOTESCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addVoterDetails(String _address, String voterIdNumber, String city, String year) {
        final Function function = new Function(
                FUNC_ADDVOTERDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address), 
                new org.web3j.abi.datatypes.Utf8String(voterIdNumber), 
                new org.web3j.abi.datatypes.Utf8String(city), 
                new org.web3j.abi.datatypes.Utf8String(year)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteVoterDetail(String _address) {
        final Function function = new Function(
                FUNC_DELETEVOTERDETAIL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getVoterCity(String _address) {
        final Function function = new Function(FUNC_GETVOTERCITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getVotedCandidatesTxtHash(String voterAddress, BigInteger idex) {
        final Function function = new Function(FUNC_GETVOTEDCANDIDATESTXTHASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(voterAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(idex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getEndTime() {
        final Function function = new Function(FUNC_GETENDTIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getVoterDateOfBirth(String _address) {
        final Function function = new Function(FUNC_GETVOTERDATEOFBIRTH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> checkIdAndPassword(String nationalID, String password) {
        final Function function = new Function(FUNC_CHECKIDANDPASSWORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nationalID), 
                new org.web3j.abi.datatypes.Utf8String(password)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> updateVotesCount(BigInteger _votesCount) {
        final Function function = new Function(
                FUNC_UPDATEVOTESCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_votesCount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getNumberOfVotes(String _address) {
        final Function function = new Function(FUNC_GETNUMBEROFVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> revokeMyVote(String _voterAddress, String _nationalId) {
        final Function function = new Function(
                FUNC_REVOKEMYVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_voterAddress), 
                new org.web3j.abi.datatypes.Utf8String(_nationalId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getVotedCandidatesAddress(String voterAddress, BigInteger idex) {
        final Function function = new Function(FUNC_GETVOTEDCANDIDATESADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(voterAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(idex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setStartDate(String _startDate) {
        final Function function = new Function(
                FUNC_SETSTARTDATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_startDate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getVoterYear(String _address) {
        final Function function = new Function(FUNC_GETVOTERYEAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getStartDate() {
        final Function function = new Function(FUNC_GETSTARTDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getCandidateVoters(String _candidateNationalId) {
        final Function function = new Function(FUNC_GETCANDIDATEVOTERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_candidateNationalId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addTxtHashVoter(String voterAddress, String _txtHash, BigInteger index) {
        final Function function = new Function(
                FUNC_ADDTXTHASHVOTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(voterAddress), 
                new org.web3j.abi.datatypes.Address(_txtHash), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setEndTime(String _endTime) {
        final Function function = new Function(
                FUNC_SETENDTIME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_endTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getVoterName(String _address) {
        final Function function = new Function(FUNC_GETVOTERNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getStartTime() {
        final Function function = new Function(FUNC_GETSTARTTIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> checkNationalID(String nationalID) {
        final Function function = new Function(FUNC_CHECKNATIONALID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(nationalID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> addVoterInfo(String _address, String voterIdNumber, String name, String birthOfDate, String password) {
        final Function function = new Function(
                FUNC_ADDVOTERINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address), 
                new org.web3j.abi.datatypes.Utf8String(voterIdNumber), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(birthOfDate), 
                new org.web3j.abi.datatypes.Utf8String(password)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> signUpVoter(String _address, String nationalID, String password, String name, String birthOfDate, String city, String year) {
        final Function function = new Function(
                FUNC_SIGNUPVOTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address), 
                new org.web3j.abi.datatypes.Utf8String(nationalID), 
                new org.web3j.abi.datatypes.Utf8String(password), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(birthOfDate), 
                new org.web3j.abi.datatypes.Utf8String(city), 
                new org.web3j.abi.datatypes.Utf8String(year)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<Voters> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voters.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Voters> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voters.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static Voters load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voters(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Voters load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voters(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
